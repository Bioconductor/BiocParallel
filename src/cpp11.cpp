// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// ipcmutex.cpp
bool cpp_ipc_remove(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_remove(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_remove(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
cpp11::r_string cpp_ipc_uuid();
extern "C" SEXP _BiocParallel_cpp_ipc_uuid() {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_uuid());
  END_CPP11
}
// ipcmutex.cpp
bool cpp_ipc_locked(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_locked(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_locked(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
bool cpp_ipc_lock(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_lock(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_lock(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
bool cpp_ipc_try_lock(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_try_lock(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_try_lock(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
bool cpp_ipc_unlock(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_unlock(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_unlock(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
int cpp_ipc_value(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_value(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_value(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}
// ipcmutex.cpp
int cpp_ipc_reset(cpp11::strings id_sexp, int n);
extern "C" SEXP _BiocParallel_cpp_ipc_reset(SEXP id_sexp, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_reset(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp), cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// ipcmutex.cpp
int cpp_ipc_yield(cpp11::strings id_sexp);
extern "C" SEXP _BiocParallel_cpp_ipc_yield(SEXP id_sexp) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ipc_yield(cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(id_sexp)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_BiocParallel_cpp_ipc_lock",     (DL_FUNC) &_BiocParallel_cpp_ipc_lock,     1},
    {"_BiocParallel_cpp_ipc_locked",   (DL_FUNC) &_BiocParallel_cpp_ipc_locked,   1},
    {"_BiocParallel_cpp_ipc_remove",   (DL_FUNC) &_BiocParallel_cpp_ipc_remove,   1},
    {"_BiocParallel_cpp_ipc_reset",    (DL_FUNC) &_BiocParallel_cpp_ipc_reset,    2},
    {"_BiocParallel_cpp_ipc_try_lock", (DL_FUNC) &_BiocParallel_cpp_ipc_try_lock, 1},
    {"_BiocParallel_cpp_ipc_unlock",   (DL_FUNC) &_BiocParallel_cpp_ipc_unlock,   1},
    {"_BiocParallel_cpp_ipc_uuid",     (DL_FUNC) &_BiocParallel_cpp_ipc_uuid,     0},
    {"_BiocParallel_cpp_ipc_value",    (DL_FUNC) &_BiocParallel_cpp_ipc_value,    1},
    {"_BiocParallel_cpp_ipc_yield",    (DL_FUNC) &_BiocParallel_cpp_ipc_yield,    1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_BiocParallel(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
